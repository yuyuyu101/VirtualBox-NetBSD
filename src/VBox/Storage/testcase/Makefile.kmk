# $Id: Makefile.kmk $
## @file
# Sub-Makefile for the storage device & driver testcases.
#

#
# Copyright (C) 2006-2012 Oracle Corporation
#
# This file is part of VirtualBox Open Source Edition (OSE), as
# available from http://www.virtualbox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualBox OSE distribution. VirtualBox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#

SUB_DEPTH = ../../../..
include $(KBUILD_PATH)/subheader.kmk

#
# vditool - useful too for manipulating VDIs, but now pretty obsolete and
# probably will go away soon. Testcase only now.
#
if defined(VBOX_WITH_TESTCASES) || defined(VBOX_WITH_VDITOOL)
 PROGRAMS += vditool
  vditool_TEMPLATE = VBOXR3TSTEXE
  vditool_LIBS     = $(LIB_DDU)
  vditool_SOURCES  = vditool.cpp
endif

#
# Basic testcases for the VD code.
#
ifdef VBOX_WITH_TESTCASES
 PROGRAMS += tstVD tstVD-2 tstVDCopy tstVDSnap tstVDShareable

 tstVD_TEMPLATE = VBOXR3TSTEXE
 tstVD_SOURCES = tstVD.cpp
 tstVD_LIBS = $(LIB_DDU)

 tstVD-2_TEMPLATE = VBOXR3TSTEXE
 tstVD-2_SOURCES  = tstVD-2.cpp
 tstVD-2_LIBS = $(LIB_DDU)

 tstVDCopy_TEMPLATE = VBOXR3TSTEXE
 tstVDCopy_SOURCES  = tstVDCopy.cpp
 tstVDCopy_LIBS = $(LIB_DDU)

 ifn1of ($(KBUILD_TARGET),win)
  PROGRAMS += tstVDIo

  tstVDIo_TEMPLATE = VBOXR3TSTEXE
  tstVDIo_SOURCES  = tstVDIo.cpp \
  	VDIoBackendMem.cpp \
  	VDMemDisk.cpp \
  	VDIoRnd.cpp
  tstVDIo_LIBS = \
  	$(LIB_DDU) \
  	$(PATH_STAGE_LIB)/StorageDbgLib$(VBOX_SUFF_LIB)
 endif

 tstVDSetUuid_TEMPLATE = VBOXR3TSTEXE
 tstVDSetUuid_LIBS = $(LIB_DDU)

 tstVDShareable_TEMPLATE = VBOXR3TSTEXE
 tstVDShareable_LIBS = $(LIB_DDU)
 tstVDShareable_SOURCES = tstVDShareable.cpp

 tstVDSnap_TEMPLATE = VBOXR3TSTEXE
 tstVDSnap_LIBS = $(LIB_DDU)
 tstVDSnap_SOURCES  = tstVDSnap.cpp
endif

if defined(VBOX_WITH_TESTCASES) || defined(VBOX_WITH_VBOX_IMG)
 PROGRAMS += vbox-img

 #
 # vbox-img - static because it migth be used as at standalone tool.
 #
 vbox-img_TEMPLATE = VBOXR3STATIC
 vbox-img_DEFS += IN_VBOXDDU IN_VBOXDDU_STATIC VBOX_HDD_NO_DYNAMIC_BACKENDS IN_RT_R3
 vbox-img_SOURCES = \
	vbox-img.cpp \
	$(VBOX_PATH_STORAGE_SRC)/VD.cpp \
	$(VBOX_PATH_STORAGE_SRC)/VDVfs.cpp \
	$(VBOX_PATH_STORAGE_SRC)/VDI.cpp \
	$(VBOX_PATH_STORAGE_SRC)/VMDK.cpp \
	$(VBOX_PATH_STORAGE_SRC)/VHD.cpp \
	$(VBOX_PATH_STORAGE_SRC)/DMG.cpp \
	$(VBOX_PATH_STORAGE_SRC)/Parallels.cpp \
	$(VBOX_PATH_STORAGE_SRC)/ISCSI.cpp \
	$(VBOX_PATH_STORAGE_SRC)/RAW.cpp \
	$(VBOX_PATH_STORAGE_SRC)/QED.cpp \
	$(VBOX_PATH_STORAGE_SRC)/QCOW.cpp \
	$(VBOX_PATH_STORAGE_SRC)/VHDX.cpp \
	$(VBOX_PATH_STORAGE_SRC)/VCICache.cpp
 vbox-img_LIBS = \
	$(VBOX_LIB_RUNTIME_STATIC)
 if1of ($(KBUILD_TARGET),os2 win)
  vbox-img_LIBS += \
	$(PATH_STAGE_LIB)/VBox-liblzf-static$(VBOX_SUFF_LIB) \
	$(PATH_STAGE_LIB)/VBox-zlib-static$(VBOX_SUFF_LIB)
 else
  vbox-img_LIBS += \
	$(PATH_STAGE_LIB)/VBox-liblzf$(VBOX_SUFF_LIB) \
	$(SDK_VBOX_ZLIB_LIBS)
 endif
 ifeq ($(KBUILD_TARGET),linux)
  vbox-img_LIBS += crypt
 else if1of ($(KBUILD_TARGET),darwin freebsd)
  vbox-img_LIBS += iconv
 else ifeq ($(KBUILD_TARGET),win)
  vbox-img_SDKS.win = VBOX_NTDLL
 else ifeq ($(KBUILD_TARGET),solaris)
  vbox-img_LIBS += kstat
 endif

endif

include $(FILE_KBUILD_SUB_FOOTER)

